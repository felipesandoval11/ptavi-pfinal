-- IMPLEMENTACIONES ADICIONALES: --

(0) En la implementación avanzada de  "Cabecera Proxy", se le coloca una
    cabecera opcional:
    "Via: SIP/2.0/UDP 127.0.0.1::8450;rport;branch=Ptavi20162017Pfinal10End"
    Y es reconocida por los algoritmos de wireshark en las trazas SIP.
    Dicha cabecera adicional SOLAMENTE se coloca en aquellos mensajes que pasen
    a través del proxy hacía un cliente distinto al emisor de dicho mensaje.
    (ej. INVITE, ACK, BYE, TRYING...)

[NOTA: en las captura exitosa llamada.libpcap no se encuentra reflejado
ningún apartado de los avanzados]

(1) Como medida de seguridad para evitar el spoofing en la comunicación, si se
    le pasa al cliente "ACK" como método éste no se iniciará y mostrará por
    pantalla el mensaje: "Usage: python uaclient.py config method option".

(2) EN EL PROXY REGISTRAR: Si todo marcha bien y al momento de establecer la
    conexión con el UAserver éste no ha sido lanzado se le responderá al
    cliente que hizo la petición con el mensaje de error "SIP/2.0 504 Server
    Time-out". Además se imprimirá por pantalla una alerta que me indicará que
    el UAServer no ha sido lanzado.

(3) EN EL PROXY REGISTRAR: Si la contraseña enviada por el cliente no coincide
    con la contraseña que figura en el documento de passwords se imprimirá por
    pantalla una alerta que me indicará que ha ocurrido un acceso denegado por
    un error en la autenticación de credenciales. Además, se enviará al cliente
    un mensaje de error "SIP/2.0 400 Bad Request" y no se registrará como
    usuario activo.

(4) Si el metodo pasado por línea de comandos es correcto pero está escrito en
    minúsculas SIEMPRE se obtendrá un mensaje de error "SIP/2.0 400 Bad 
    Request".

(5) Se generará un archivo con extensión .json bajo el nombre
    "active_clients.json" y contendrá información actualizada de los usuarios
    activos actualmente. Además, cada vez que se reciba un mensaje en el proxy
    registrar se actualizará su información de caducidad, siendo eliminados si
    su tiempo se encontrase expirado.

(6) Es posible añadir todos los clientes que se desee mientras se respete el
    formato del archivo passwords y se añadan tanto el login o usuario y su
    contraseña.

(7) En la implementación avanzada de "Consistencia del servidor proxy/registrar
    frente a valores erróneos" se han implementado las siguientes medidas:
    [En caso de error en los parámetros el programa no se ejecutaría e
    imprimirá por pantalla "Usage: python nombre-programa.py config 
    <method><option>"]
    *   Si se pasa como nombre de método "ACK"
    *   Si no es un entero el expire del Register
    *   Si hay más valores de los necesarios en la línea de comandos 
    *   Si no existe el mínimo de valores necesarios en la línea de comandos
    *   Si no existe el archivo de audio a enviar previamente especificado en 
        el xml
    *   Si los valores de los puertos del xml no son enteros
    *   Si el rango de las IPs no tiene sentido. Se toman en cuenta en 
        consideración el rango de IPs desde la Clase A a la clase E, aunque         
        muchas IPs que puedan ser válidas tampoco tengan mucho sentido. 
        Se implementa dicha comprobación con la función valid_ip dentro del 
        ConfigHandler.
        (el rango de las IPs va desde la 0.0.0.0 hasta la 255.255.255.255)
[En caso de error se obtendrá como respuesta el código de error 400]
    *   Si un cliente no registrado (usuario activo) envia un INVITE o un BYE
        a un usuario se le rechazará su petición y se contestará con código
        de respuesta 404
[Casos más rebuscados]
    *   En caso de que el fichero passwords no exista, todas las contraseñas 
        tendrán como valor un número aleatorio de 6 dígitos. Nunca se podrá 
        establecer la conversación.

(8) El programa funciona si no se pasan en el fichero xml los parámetros 
    obligatorios, dando un valor por defecto a los valores necesarios.

(9) [COMO MÉTODO CORRECTIVO] La respuesta del proxy 401 no era codificada de     
    una manera correcta por wireshark, esto se debía a que la sintaxis de la     
    respuesta no estaba escrita de manera correcta. La forma correcta es:
    
    SIP/2.0 401 Unauthorized
    WWW-Authenticate: Digest nonce="898989898798989898989"
    
    (nótese el "-" después del WWW)

(10) Todos los programas han sido analizados con la herramienta de optimización     
     de calidad "pylint".

(11) Práctica realizada en inglés en su totalidad.

(12) Se recuperan los usuarios activos así el servidor sufra una caída y los     
     INVITES son tomados en cuenta si el usuario se ha registrado previamente.

(13) Parte de Threads implementada. Al momento de terminar un hilo de ejecución 
     se ejecutará el código: "killall vlc 2> /dev/null" (o bien mp32rtp) y así 
     de esta manera no se imprimirá nada por pantalla en caso que no estuviese 
     en ejecución

(14) Para que no existan problemas en los logs es aconsejable lanzar primero 
     los clientes antes que los servidores de los UA.

(15) Al momento de probar la práctica, el apartado avanzado "Hilos para el 
     envío de audio vía RTP" se implementa correctamente con la excepción del
     mensaje de error "480 Temporarily Unavailable". No logré entender esa 
     parte de Threads y al ejecutar el comando "killall" se "matan" todos los 
     procesos que se ejecuten. 

Realizado por Felipe Sandoval Sibada.